import 'package:firebase_core/firebase_core.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:flutter_application_1/core/configs/theme/app_theme.dart';
import 'package:flutter_application_1/firebase_options.dart';
import 'package:flutter_application_1/presentation/choose_mode/bloc/theme_cubit.dart';
import 'package:flutter_application_1/presentation/pages/splash.dart';
import 'package:flutter_application_1/service_locator.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:hydrated_bloc/hydrated_bloc.dart';
import 'package:path_provider/path_provider.dart';

Future<void> main() async {
  WidgetsFlutterBinding.ensureInitialized();
  HydratedBloc.storage = await HydratedStorage.build(
    storageDirectory:
        kIsWeb
            ? HydratedStorageDirectory.web
            : HydratedStorageDirectory((await getTemporaryDirectory()).path),
  );

  // Initialize Firebase
  // This is required for Firebase to work properly
  // and should be done before using any Firebase services.
  // You can use the FirebaseOptions class to specify the options for your app
  // based on the platform you are running on.
  // The FirebaseOptions class is generated by the FlutterFire CLI
  // and contains the necessary configuration for your app.
  // You can find more information about the FirebaseOptions class
  // in the Firebase documentation.
  // The Firebase.initializeApp method is used to initialize Firebase
  // with the specified options.
  // This method should be called before using any Firebase services.
  // The Firebase.initializeApp method returns a Future
  // that completes when Firebase is initialized.
  // You can use the await keyword to wait for the Future to complete
  // before using any Firebase services.
  // The Firebase.initializeApp method takes an optional options parameter
  // that specifies the options for your app.
  // The options parameter is of type FirebaseOptions
  // and contains the necessary configuration for your app.
  // The FirebaseOptions class is generated by the FlutterFire CLI
  // and contains the necessary configuration for your app.
  await Firebase.initializeApp(options: DefaultFirebaseOptions.currentPlatform);
  await initializeDependencies();
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  // This widget is the root of your application.
  @override
  Widget build(BuildContext context) {
    return MultiBlocProvider(
      providers: [BlocProvider(create: (_) => ThemeCubit())],
      child: BlocBuilder<ThemeCubit, ThemeMode>(
        builder:
            (context, mode) => MaterialApp(
              theme: AppTheme.lightTheme,
              darkTheme: AppTheme.darkTheme,
              themeMode: mode,
              debugShowCheckedModeBanner: false,
              home: const SplashPage(),
            ),
      ),
    );
  }
}
